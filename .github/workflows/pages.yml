name: Build & Deploy Pages (any branch → gh-pages) [PWA + Previews]

on:
  push:
    branches: ["**"]         # publica en todas las ramas
    branches-ignore:
      - gh-pages             # evita loops
    paths-ignore:
      - "dist/**"
      - "docs/**"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: true

env:
  # SITE_BASE y DEST_DIR dinámicos:
  # main -> /rn-sudoku    y destino '.'
  # otras ramas -> /rn-sudoku/preview/<rama>   y destino 'preview/<rama>'
  SITE_BASE: ${{ github.ref_name == 'main' && '/rn-sudoku' || format('/rn-sudoku/preview/{0}', github.ref_name) }}
  DEST_DIR:  ${{ github.ref_name == 'main' && '.'          || format('preview/{0}', github.ref_name) }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install
        run: npm ci --no-audit --no-fund

      - name: Clean stray Expo keys in package.json
        run: |
          node - <<'NODE'
          const fs=require('fs');
          const p=JSON.parse(fs.readFileSync('package.json','utf8'));
          delete p.icon; delete p.web; delete p.splash;
          fs.writeFileSync('package.json', JSON.stringify(p,null,2));
          NODE

      - name: Generate CI assets and app.json (PWA)
        run: |
          sudo apt-get update && sudo apt-get install -y imagemagick
          mkdir -p assets
          convert -size 1024x1024 xc:none PNG32:assets/icon.png
          cp assets/icon.png assets/icon.local.png
          convert assets/icon.png -resize 512x512 PNG32:assets/favicon.png
          cp assets/favicon.png assets/favicon.local.png
          convert -size 2048x2048 xc:white PNG32:assets/splash.png
          cp assets/splash.png assets/splash.local.png

          cat > app.json <<JSON
          {
            "expo": {
              "name": "rn-sudoku",
              "slug": "rn-sudoku",
              "platforms": ["ios", "android", "web"],
              "userInterfaceStyle": "automatic",
              "icon": "./assets/icon.png",
              "splash": {
                "image": "./assets/splash.png",
                "resizeMode": "contain",
                "backgroundColor": "#ffffff"
              },
              "web": {
                "bundler": "metro",
                "favicon": "./assets/favicon.png",
                "build": { "publicPath": "${SITE_BASE}/", "pwa": true },
                "themeColor": "#ffffff"
              }
            }
          }
          JSON

      - name: Enable sharp image pipeline
        run: npm i -D sharp sharp-cli

      - name: Check sharp presence
        run: node -e "require.resolve('sharp');console.log('sharp present ✅')"

      - name: Disable image utils cache
        run: echo "EXPO_IMAGE_UTILS_NO_CACHE=1" >> $GITHUB_ENV

      - name: Build web (to dist/)
        run: npm run build:web
        env:
          EXPO_APP_JSON: app.json

      - name: Rewrite base paths for GH Pages + PWA
        run: |
          set -e
          SRC="assets/favicon.png"; [ -f "$SRC" ] || SRC="assets/icon.png"
          cp "$SRC" dist/favicon.png || true
          sudo apt-get update && sudo apt-get install -y imagemagick
          convert "$SRC" -define icon:auto-resize=256,128,64,48,32,16 dist/favicon.ico || true

          find dist -type f \( -name '*.html' -o -name '*.js' -o -name '*.json' -o -name '*.css' \) -print0 | xargs -0 sed -i \
            -e "s:\"/_expo/:\"${SITE_BASE}/_expo/:g" \
            -e "s:'/_expo/:'${SITE_BASE}/_expo/:g" \
            -e "s:\"/sw\\.js\":\"${SITE_BASE}/sw.js\":g" \
            -e "s:'/sw\\.js':'${SITE_BASE}/sw.js':g" \
            -e "s:\"/manifest\\.json\":\"${SITE_BASE}/manifest.json\":g" \
            -e "s:'/manifest\\.json':'${SITE_BASE}/manifest.json':g" \
            -e "s:href=[\"']/favicon\\.ico[\"']:href=\"${SITE_BASE}/favicon.ico\":g"

          node - <<'NODE'
          const fs=require('fs'); const SITE_BASE=process.env.SITE_BASE||'';
          for (const f of ['dist/index.html','dist/404.html']) {
            if (!fs.existsSync(f)) continue;
            let html=fs.readFileSync(f,'utf8');
            html=html.replace(/<link[^>]*rel=["']icon["'][^>]*>\s*/gi,'');
            html=html.replace(/<link[^>]*rel=["']manifest["'][^>]*>\s*/gi,'');
            if (html.includes('</head>')) {
              html=html.replace('</head>', `  <link rel="icon" href="${SITE_BASE}/favicon.ico"/>\n  <link rel="manifest" href="${SITE_BASE}/manifest.json"/>\n</head>`);
            }
            fs.writeFileSync(f, html);
          }
          NODE

          if [ -f dist/manifest.json ]; then
            node - <<'NODE'
            const fs=require('fs'); const p='dist/manifest.json';
            const SITE_BASE=process.env.SITE_BASE||'/';
            if (fs.existsSync(p)) {
              const m=JSON.parse(fs.readFileSync(p,'utf8'));
              m.start_url = SITE_BASE + '/';
              m.scope     = SITE_BASE + '/';
              if (Array.isArray(m.icons)) {
                m.icons = m.icons.map(ic=>{
                  if (typeof ic.src==='string' && ic.src.startsWith('/')) ic.src = SITE_BASE + ic.src;
                  return ic;
                });
              }
              fs.writeFileSync(p, JSON.stringify(m, null, 2));
            }
            NODE
          fi

      - name: SPA fallback & nojekyll
        run: |
          echo '<!DOCTYPE html><html><head><meta charset="utf-8"><meta http-equiv="refresh" content="0; url=./index.html"></head><body></body></html>' > dist/404.html
          touch dist/.nojekyll

      - name: Deploy to gh-pages (root for main; preview/<branch> for others)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          destination_dir: ${{ env.DEST_DIR }}
          keep_files: true
